{"version":3,"file":"server.cjs","sources":["../../vizhub-core/src/server.js","../../vizhub-core/src/entities/createInstance.js","../../vizhub-core/src/entities/VizInfo.js","../../vizhub-core/src/getShareDBSnapshot.js","../../vizhub-core/src/pageData.js","../../vizhub-core/src/indexHTML.js","../../vizhub-core/src/plugins/vizPagePlugin/VizPage.js","../../vizhub-core/src/plugins/vizPagePlugin/server.js","../src/server.js"],"sourcesContent":["import http from 'http';\nimport WebSocket from 'ws';\nimport express from 'express';\nimport ShareDB from 'sharedb';\nimport mongodb from 'mongodb';\nimport ShareDBMongo from 'sharedb-mongo';\nimport WebSocketJSONStream from '@teamwork/websocket-json-stream';\n\nexport const server = (plugins) => {\n  // See:\n  // https://share.github.io/sharedb/getting-started\n  // https://github.com/share/sharedb-mongo\n  const mongoURI =\n    process.env.VIZHUB_MONGO_URI || 'mongodb://localhost:27017/vizhub';\n\n  const db = ShareDBMongo({\n    mongo: async (callback) => {\n      const timeout = setTimeout(() => {\n        console.log('\\nHaving trouble connecting to the database...');\n        console.log('Ensure that the database is running.');\n        console.log(\n          `VIZHUB_MONGO_URI environment variable is \"${process.env.VIZHUB_MONGO_URI}\"`\n        );\n        console.log(`Using Mongo URI \"${mongoURI}\".`);\n        console.log('See README for setup details.');\n        console.log('In dev on Linux, start MongoDB with:');\n        console.log('\\nsudo service mongod start\\n');\n      }, 4000);\n\n      const mongoClient = new mongodb.MongoClient(mongoURI, {\n        useUnifiedTopology: true,\n      });\n      const mongoDatabase = await mongoClient.connect();\n      clearTimeout(timeout);\n      callback(null, mongoDatabase);\n    },\n  });\n\n  const backend = new ShareDB({ db });\n\n  const shareDBConnection = backend.connect();\n  const expressApp = express();\n  const port = 8000;\n\n  expressApp.use(express.static('public'));\n\n  for (const plugin of plugins) {\n    plugin.extendServer?.(expressApp, shareDBConnection);\n  }\n\n  const server = http.createServer(expressApp);\n\n  const wss = new WebSocket.Server({ server });\n  wss.on('connection', (ws) => {\n    backend.listen(new WebSocketJSONStream(ws));\n  });\n\n  server.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n  });\n};\n","// Creates an instance of an entity.\n// Supports instanceof checks (e.g. vizInfo instanceof VizInfo).\n//\n//  * `constructor.keys` is the list of keys to copy from data.\n//    It is an extension point for plugins. Plugins may append to\n//    this array at import time to augment entities with more properties.\nexport const createInstance = (constructor, data) => {\n  if (!data) return null;\n  const instance = new constructor();\n  for (const key of constructor.keys) {\n    instance[key] = data[key];\n  }\n  return instance;\n};\n","import { createInstance } from './createInstance';\n\nexport function VizInfo(data) {\n  return createInstance(VizInfo, data);\n}\n\nVizInfo.keys = [\n  // The unique ID of the document.\n  'id',\n\n  // The ID of the user that owns this document.\n  'owner',\n\n  // The title of the document.\n  'title',\n\n  // The Markdown description of the document.\n  'description',\n\n  // The Unix timestamp at which this document was created.\n  'createdTimestamp',\n\n  // The Unix timestamp at which this document was last updated.\n  'lastUpdatedTimestamp',\n\n  // The visualization that this visualization was forked from.\n  'forkedFrom',\n\n  // The number of forks this viz has.\n  // Updatable via query across entire database at once.\n  // Also updated incrementally as forks are created.\n  'forksCount',\n\n  // The height of the viz in pixels.\n  'height',\n];\n","// Gets a current snapshot of a ShareDB document.\nexport const getShareDBSnapshot = (shareDBConnection, collectionName) => (id) =>\n  new Promise((resolve, reject) => {\n    // See https://github.com/share/sharedb/blob/master/examples/counter-json1/server.js\n    const shareDBDoc = shareDBConnection.get(collectionName, id);\n    shareDBDoc.fetch((error) => {\n      if (error) {\n        return reject(error);\n      }\n      if (shareDBDoc.type === null) {\n        // Not found.\n        return resolve(null);\n      }\n      const { version, data, type } = shareDBDoc;\n      const snapshot = { v: version, data, type };\n      resolve(snapshot);\n    });\n  });\n","// These functions are responsible for safely transporting page data\n// from the server, via a string in HTML to the client rendered app.\n\nexport const encodePageData = (pageData) =>\n  btoa(encodeURIComponent(JSON.stringify(pageData)));\n\nexport const decodePageData = (encodedPageData) =>\n  JSON.parse(decodeURIComponent(atob(encodedPageData)));\n","import { encodePageData } from './pageData';\n\nconst reactVersion = \"17.0.2\";\nconst cdn = 'https://cdn.jsdelivr.net/npm';\n\n// TODO get oembed working\n// <link rel=\"alternate\" type=\"application/json+oembed\" href=\"https://vizhub.com/oembed?url=https://vizhub.com/\" title=\"VizHub - data visualization platform\"/>\n\n// TODO remove this, implement it for each page\nconst defaultMeta = {\n  url: 'https://vizhub.com',\n  title: 'VizHub - data visualization platform',\n  description:\n    'Learn to code interactive graphics &amp; data visualization with Web technologies!',\n  image: 'https://vizhub.com/images/unfurl-logo.png',\n  siteName: 'VizHub',\n\n  // See https://ogp.me/#types\n  // TODO use \"article\" for vizzes\n  // TODO use \"profile\" for user profiles\n  type: 'website',\n};\n\n// TODO i18n, translations\nconst locale = 'en-US';\n\nexport const indexHTML = ({\n  title,\n  rootHTML,\n  pageData,\n\n  // TODO tweak meta information per page.\n  meta = defaultMeta,\n}) => `<!DOCTYPE html>\n<html lang=\"${locale}\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>${title}</title>\n    <meta name=\"theme-color\" content=\"#f6eee3\">\n\n    <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n    <link rel=\"manifest\" href=\"/manifest.json\" crossorigin=\"use-credentials\"/>\n    <link href=\"/build/styles.css\" rel=\"stylesheet\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <meta property=\"og:url\" content=\"${meta.url}\"/>\n    <meta property=\"og:title\" content=\"${meta.title}\"/>\n    <meta property=\"og:description\" content=\"${meta.description}\"/>\n    <meta property=\"og:image\" content=\"${meta.image}\"/>\n    <meta property=\"og:site_name\" content=\"${meta.siteName}\"/>\n    <meta property=\"og:locale\" content=\"${locale}\" />\n    <meta property=\"og:type\" content=\"${meta.type}\"/>\n    <meta name=\"twitter:card\" content=\"summary_large_image\"/>\n  </head>\n  <body>\n    <div id=\"root\">${rootHTML}</div>\n    <script src=\"${cdn}/react@${reactVersion}/umd/react.production.min.js\"></script>\n    <script src=\"${cdn}/react-dom@${reactVersion}/umd/react-dom.production.min.js\"></script>\n    <script>\n      window.pageData = \"${encodePageData(pageData)}\";\n    </script>\n    <script src=\"/build/index.js\"></script>\n  </body>\n</html>`;\n","import React from 'react';\n\nexport const VizPage = ({ vizInfo }) => <div>{vizInfo.title}</div>;\n","import React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { VizInfo } from '../../entities/VizInfo';\nimport { getShareDBSnapshot } from '../../getShareDBSnapshot';\nimport { indexHTML } from '../../indexHTML';\nimport { VizPage } from './VizPage';\n\nexport const vizPageServerPlugin = () => ({\n  extendServer: (expressApp, shareDBConnection) => {\n    const getVizInfoSnapshot = getShareDBSnapshot(\n      shareDBConnection,\n      'documentInfo'\n    );\n\n    expressApp.get('/:userName/:vizId', async (req, res) => {\n      const { vizId } = req.params;\n\n      try {\n        const vizInfoSnapshot = await getVizInfoSnapshot(vizId);\n        if (vizInfoSnapshot === null) {\n          return res.send('TODO 404 not found page. need to log in?');\n        }\n\n        const vizInfo = VizInfo(vizInfoSnapshot.data);\n        const { title } = vizInfo;\n\n        // TODO SSR React-Router\n        // TODO leverage ingestSnapshot in frontend.\n\n        const rootHTML = renderToString(<VizPage vizInfo={vizInfo} />);\n        const pageData = { vizInfoSnapshot };\n\n        res.type('html');\n        res.send(indexHTML({ title, rootHTML, pageData }));\n      } catch (error) {\n        // Should never happen, but if it does, surface the error clearly.\n        console.log(error);\n        res.send(error.toString?.());\n      }\n    });\n  },\n});\n","import { server, vizPageServerPlugin } from 'vizhub-core/server';\n\nconst plugins = [vizPageServerPlugin()];\n\nserver(plugins);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;qgBAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;;AAEA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA,kHACA;;;ACDA,mnBAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;;"}